Insert Interval

//Tests
describe('insert', () => {
  it('should insert an interval into an array of arrays and merge if necessary'), => {
    let test1 = [[1,3],[6,9]];
    let interval1 = [2,5];
    let result1 = [[1,5],[6,9]];

    let test2 = [[1,2],[3,5],[6,7],[8,10],[12,16]];
    let interval2 = [4,8];
    let result2 = [[1,2],[3,10],[12,16]];

    expect(insert(test1)).toEqual(result1);
    expect(insert(test2)).toEqual(result2);
  });
});

//Procedure Space/Time Complexity: O(1)/O(log n)
Binary Search to position using the start date as target and searching through end dates. If target is between found interval's start and endd then the interval needs to be merged. 

When position is found
- Check if target's end sits between position's start and end.
- Check if target's end is less than the next interval's start
- Insert new interval and delete necessarhy intervals


//Can we do better?
So far no. Search is the only practical place of optimization and it seems impossible to get a O(1) search.

//Solution Attempt
/**
 * @param {number[][]} intervals
 * @param {number[]} newInterval
 * @return {number[][]}
 */
var insert = function(intervals, newInterval) {
  let position = 0;
  let mergeStart = false;

  let search = target => {
    let start = 0;
    let end = intervals.length - 1;

    while(start < end) {
      position = start + Math.floor(end - start) / 2);

      if(interval[position][0] <= target && target <= interval[position][1] ) {
        mergeStart = true;
        break;
      } else if(intervals[position][0] > target) {
        end = position;
      } else if(intervals[position][1] < target) {
        start = position;
      }
    }

  };

  let insertInterval = () => {
      search(newInterval[0]);

      let start = mergeStart ? intervals[position][0] : newInterval[0];
      let end = newInterval[1];
      let i = position;

      while(i < intervals.length) {
        if(intervals[i][0] <= end && end <= intervals[i][1]) {
          end = intervals[i][1];
          i++;
          break;
        } else if(i === intervals.length - 1 || intervals[i + 1][0] > end) {
          mergeStart && i === 0 ? i++ : null;
          break;
        }

        i++;
      }

      intervals.splice(position, i - position, [start, end]);
  };

  insertInterval();
  return intervals;
};