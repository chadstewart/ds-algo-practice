Maximum Depth of Binary Tree

//Tests
describe('maxDepth', () => {
    it('should return an integer that is the max depth of a given tree', ()=> {
        let root = {
            val: *some value*,
            left: *some left pointer*,
            right: *some right pointer
        }

        expect(maxDepth(root)).toBe(3);
    });
});

//Procedure
Write a depth first search algorithm

Test the stack's length where the highest length is the tree's max depth.

//Solution Attempt
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {
    let stack = [root];
    let maxStack;

    while(stack.length !== 0) {
        let currentNode = stack[stack.length - 1];

        if(currentNode.left && !currentNode.left[visited]) {
            stack.push(currentNode.left);
            currentNode.left[visited] = true;
            continue;
        }

        if(currentNode.right && !currentNode.right[visited]) {
            stack.push(currentNode.right);
            currentNode.right[visited] = true;
            continue;
        }

        maxStack = Math.max(maxStack, stack.length);
        stack.pop();            
    }

    return maxStack;
    
};

//Recursion Procedure

Build dfs recursively

Track max depth as function recurses
- depth should be 0 when recursion ends

//Recursion Solution Attempt
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {
    let depth = 0;
    let maxDepth = 0;
    
    let dfs = node => {
        if(node) {
            depth++;
            dfs(node.left);
            dfs(node.right);
            maxDepth = Math.max(depth, maxDepth);
            depth--;
        }
    };
    
    dfs(root);
    return maxDepth;
};