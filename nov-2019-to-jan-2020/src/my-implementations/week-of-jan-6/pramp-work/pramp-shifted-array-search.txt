/*

Procedure: Space/Time Complexity:O(1)/O(log n)

Binary Search to find the point the element has shifted, Check middle, if next
element is smaller, this is the shift, if next element is bigger, check against
first element to find out which half of the array you're in.

*/
function shiftedArrSearch(shiftArr, num) {
  // your code goes here
  debugger;
  
  let searchForBreak = array => {
    let start = 0;
    let end = array.length;
    
    while(start <= end) {
      let middle = start + Math.floor((end - start) / 2);
      
      if(array[middle] > array[middle + 1]) {
        return middle + 1;
      } else if(array[middle] > array[0]) {
        start = middle + 1;
      } else {
        end = middle - 1;
      }
    }
    
    return 0;
  }
  
  let arrBreak = searchForBreak(shiftArr);
  
  let binarySearch = (array, start, end) => {
    
    while(start <= end) {
      let middle = start + Math.floor((end - start) / 2);
      
      if(num === array[middle]) {
        return middle;
      } else if(num < array[middle]) {
        end = middle - 1;
      } else {
        start = middle + 1;
      }
    }
    
    return -1;    
  }
  
  let result = 0;
  
  result = binarySearch(shiftArr, arrBreak, shiftArr.length);
  result === -1 ? result = binarySearch(shiftArr, 0, arrBreak) : null;
  
  return result;
}