Product of Array Except Self

//Tests
describe('productExceptSelf', () => {
    it('should return an array where each element is a product of only the other elements in the array', () => {
        expect(productExceptSelf([1,2,3,4])).toEqual([24,12,8,6]);
    });

    it('should return an array of products even if one of the elements is not 1', () => {
        expect(productExceptSelf([2,3,4,5])).toEqual([60,40,30,24]);
    })
});

//Naive Invalid Solution Attempt
/**
 * @param {number[]} nums
 * @return {number[]}
 */
var productExceptSelf = function(nums) {
    let result = [];
    let product = 0;

    for(let i = 0; i < nums.length; i++) {
        product = 0;

        for(let j = 0; j < nums; j++) {
            if(j === i) {
                continue;
            }

            product *= nums[j];
        }

        result.push[product];
    }

    return result;    
};

//Solution Attempt
/**
 * @param {number[]} nums
 * @return {number[]}
 */
var productExceptSelf = function(nums) {
    let result = [];
    let tempR = [];
    let tempL = [];

    for(let i = 0; i < nums.length; i++) {
        if(i === 0) {
            tempR[i] = 1;
        }

        tempR[i] = nums[i - 1] * tempR[i - 1];
    }

    for(let i = nums.length - 1; i < 0; i--) {
        if(i === nums.length - 1) {
            tempR[i] = 1;
        }

        tempR[i] = nums[i + 1] * tempR[i + 1];
    }

    for(let i = 0; i < nums.length; i++) {
        result.push(tempL[i] * tempR[i]);
    }

    return result;    
};

//Solution Explanation
The goal is to get two arrays, one with products of each previous entry incrementing to the right and the other to the left. Then add those two arrays together to get the resulting array to return.