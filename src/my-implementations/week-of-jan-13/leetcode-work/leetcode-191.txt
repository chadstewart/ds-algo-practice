Number of 1 Bits

//Tests
describe('hammingWeight', () => {
    it('should return number of on bits', () => {
        expect(hammingWeight(23)).toBe(4);
        expect(hammingWeight(140)).toBe(3);
    });
});

//Procedure Proposed Space/Time Complexity:O(1)/O(n) where n = 32;
Use check bit and bitwise and specific bit.

If bit is on then increment result;

Return result after loop is complete

//Can we do better?
There are minor improvements that can be made in the loop to potentially learn which bit is the last bit and stop the loop.

//Solution Attempt
/**
 * @param {number} n - a positive integer
 * @return {number}
 */
var hammingWeight = function(n) {
    let result = 0;

    for(let i = 0; i < 32; i++) {
        let check = 1;
        check << i;
        check = check & n;
        check >> i === 1 && result++;
    }
    
    return result;
};